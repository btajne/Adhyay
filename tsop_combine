import time
import board
import pulseio
import adafruit_irremote
import busio
import sdcardio
import storage
import microcontroller
import time, board, digitalio
from audiomp3 import MP3Decoder
from audiopwmio import PWMAudioOut as AudioOut
import digitalio
import pwmio

song_dict = {(254, 1, 31, 224): "Shree-Ram-Janki", (254, 1, 175, 80): "Hanuman Chalisa",(254, 1, 39, 216): "kesri_ke_laal",
             (254, 1, 7, 248): "Heeriye",(254, 1, 207, 48): "Jamal Jamaloo Animal", (254, 1, 79, 176): "Khalasi",
             (254, 1, 143, 112): "Mera Bhola Hai Bhandari",(254, 1, 255, 0): "Ram Siya Ram", (254, 1, 15, 240): "Satranga",
             (254, 1, 103, 152): "Shiv Sama Rahe", (254, 1, 135, 120): "stop_song"}

direction_dict = {(254, 1, 159, 96):"forward", (254, 1, 95, 160): "reverse", (254, 1, 191, 64):"left",
                  (254, 1, 63, 192):"right", (254, 1, 127, 128):"stop"}



motor1_pin1 = digitalio.DigitalInOut(board.GP11)  # Motor 1 input 1
motor1_pin2 = digitalio.DigitalInOut(board.GP10)  # Motor 1 input 2

motor2_pin1 = digitalio.DigitalInOut(board.GP14)  # Motor 2 input 1
motor2_pin2 = digitalio.DigitalInOut(board.GP15)  # Motor 2 input 2

# Set motor control pins as outputsimport digitalio
motor1_pin1.direction = digitalio.Direction.OUTPUT
motor1_pin2.direction = digitalio.Direction.OUTPUT
motor2_pin1.direction = digitalio.Direction.OUTPUT
motor2_pin2.direction = digitalio.Direction.OUTPUT
motor1_pin1.value = 0
motor1_pin2.value = 0
motor2_pin1.value = 0
motor2_pin2.value = 0



# Function to move the motor forward
def move_forward():
    motor1_pin1.value = 1
    motor1_pin2.value = 0
    motor2_pin1.value = 1
    motor2_pin2.value = 0
# Function to move the motor backward
def move_backward():
    motor1_pin1.value = 0
    motor1_pin2.value = 1
    motor2_pin1.value = 0
    motor2_pin2.value = 1
    
def move_left():
    motor1_pin1.value = 1
    motor1_pin2.value = 0
    motor2_pin1.value = 0
    motor2_pin2.value = 1
    
def move_right():
    motor1_pin1.value = 0
    motor1_pin2.value = 1
    motor2_pin1.value = 1
    motor2_pin2.value = 0

# Function to stop the motor
def stop_motor():
    motor1_pin1.value = 0
    motor1_pin2.value = 0
    motor2_pin1.value = 0
    motor2_pin2.value = 0





tsop_pin = board.GP0  # Connect the TSOP1738 sensor to the Raspberry Pi Pico
pulsein = pulseio.PulseIn(tsop_pin, maxlen=120, idle_state=True) # Set up the pulse input on the specified pin
decoder = adafruit_irremote.GenericDecode() # Set up the decoder for the TSOP1738

MOSI = board.GP19
MISO = board.GP16
clk = board.GP18
cs = board.GP17
spi = busio.SPI(clk, MOSI=MOSI, MISO=MISO)
sd = sdcardio.SDCard(spi, cs)

vfs = storage.VfsFat(sd)
storage.mount(vfs, '/sd')

audio = AudioOut(board.GP28)
path = "sd/"


def play_mp3(filename):
    decoder_song.file = open(filename, "rb")
    audio.play(decoder_song)
    

while True:
    try:
        print("Waiting for pulse")
        pulses = decoder.read_pulses(pulsein) # Wait for an IR signal and decode it
        print("Got Pulse")
        time.sleep(1)
        code = decoder.decode_bits(pulses)
        # Print the received IR code
        if code:
            print("Received IR code:", code)

            try:
                if code:
                    if code in song_dict.keys():
                        if song_dict[code] == "stop_song":
                            audio.stop()
                            print("Stop song")
                        else:
                            audio.stop()
                            song_name = song_dict[code]
                            print(f"Playing Song {song_name}",)
                            time.sleep(1)
                            bajao = f"/sd/songs/{song_name}.mp3"
                            with open(f"/sd/songs/{song_name}.mp3", "rb") as file:
                                filename = f"/sd/songs/{song_name}.mp3"
                                mp3_file = open(filename, "rb")
                                decoder_song = MP3Decoder(mp3_file)
                                play_mp3(f"/sd/songs/{song_name}.mp3")
                    elif code in direction_dict.keys():
                        if direction_dict[code] == "forward":
                            print("Forward")
                            move_forward()
                        elif direction_dict[code] == "reverse":
                            print("Reverse")
                            move_backward()
                        elif direction_dict[code] == "left":
                            print("left")
                            move_left()
                        elif direction_dict[code] == "right":
                            print("right")
                            move_right()
                        elif direction_dict[code] == "stop":
                            print("stop")
                            stop_motor()
                    else:
                        print("Invalid Code")
            except KeyError:
                print("Invalid code")
                
    except adafruit_irremote.IRNECRepeatException:
        pass

    except adafruit_irremote.IRDecodeException as e:
        print("Failed to decode IR signal:", e)

    time.sleep(0.1)  # Wait for a short duration before checking again
