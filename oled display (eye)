# Import required libraries for Display, time, and Font
import board, busio, displayio, time
import adafruit_displayio_ssd1306
import adafruit_imageload

# Converted bitmap file - SPRITE Sheet image
IMAGE_FILE = "icon_28_frames.bmp"
SPRITE_SIZE = (64, 64)
FRAMES = 28

# Function for Monochrome displays to invert the background color
def invert_colors():
    temp = icon_pal[0]
    icon_pal[0] = icon_pal[1]
    icon_pal[1] = temp

displayio.release_displays()

# I2C pin mapping - SDA->GP0 & SCL->GP1 
sda, scl = board.GP26, board.GP27
i2c = busio.I2C(scl, sda)

# Initialize I2C display with device address 0x3C
# Display Width x Height for SSD1306 = 128x64 Pixels
display_bus = displayio.I2CDisplay(i2c, device_address=0x3C)
display = adafruit_displayio_ssd1306.SSD1306(display_bus, width=128, height=64)

group = displayio.Group()

# load the spritesheet
icon_bit, icon_pal = adafruit_imageload.load(IMAGE_FILE,
                                             bitmap=displayio.Bitmap,
                                             palette=displayio.Palette)
invert_colors()

# Coordinates x=32, y=0 to keep icon animation at the center of Display
icon_grid = displayio.TileGrid(icon_bit, pixel_shader=icon_pal,
                               width=1, height=1,
                               tile_height=SPRITE_SIZE[1], tile_width=SPRITE_SIZE[0],
                               default_tile=0,
                               x=32, y=0)

# Append the icon grid to Display(Image) group
group.append(icon_grid)

# Set the root group
display.root_group = group

# Timer Variables
timer = 0
pointer = 0

# Following loop makes sure that (SPRITE Sheet Images) are displayed 
# in a continuous sequence to create an animation effect
while True:
    if (timer + 0.1) < time.monotonic():
        icon_grid[0] = pointer
        pointer += 1
        timer = time.monotonic()
        if pointer > FRAMES - 1:
            pointer = 0
