import time
import board
import busio
import adafruit_hcsr04
import digitalio

# Middle ultrasonic sensor pins
TRIGGER_PIN_M = board.GP9
ECHO_PIN_M = board.GP8

# Motor pins
MOTOR1_PIN1 = board.GP11
MOTOR1_PIN2 = board.GP10
MOTOR2_PIN1 = board.GP14
MOTOR2_PIN2 = board.GP15

# Initialize middle ultrasonic sensor
sonar_m = adafruit_hcsr04.HCSR04(trigger_pin=TRIGGER_PIN_M, echo_pin=ECHO_PIN_M)

# Initialize motor control pins
motor1_pin1 = digitalio.DigitalInOut(MOTOR1_PIN1)
motor1_pin2 = digitalio.DigitalInOut(MOTOR1_PIN2)
motor2_pin1 = digitalio.DigitalInOut(MOTOR2_PIN1)
motor2_pin2 = digitalio.DigitalInOut(MOTOR2_PIN2)

motor1_pin1.direction = digitalio.Direction.OUTPUT
motor1_pin2.direction = digitalio.Direction.OUTPUT
motor2_pin1.direction = digitalio.Direction.OUTPUT
motor2_pin2.direction = digitalio.Direction.OUTPUT

# Function to get distance from middle ultrasonic sensor
def get_dis_mid():
    distance_m = sonar_m.distance
    return distance_m

# Function to move both motors forward
def move_forward():
    motor1_pin1.value = True
    motor1_pin2.value = False
    motor2_pin1.value = True
    motor2_pin2.value = False

# Function to move both motors backward
def move_backward():
    motor1_pin1.value = False
    motor1_pin2.value = True
    motor2_pin1.value = False
    motor2_pin2.value = True

# Function to move left
def move_left():
    motor1_pin1.value = False
    motor1_pin2.value = True
    motor2_pin1.value = True
    motor2_pin2.value = False

# Function to move right
def move_right():
    motor1_pin1.value = True
    motor1_pin2.value = False
    motor2_pin1.value = False
    motor2_pin2.value = True

# Function to stop both motors
def stop_motors():
    motor1_pin1.value = False
    motor1_pin2.value = False
    motor2_pin1.value = False
    motor2_pin2.value = False

# Main loop
while True:
    try:
        # Read distance from the middle ultrasonic sensor
        distance_m = get_dis_mid()
        
        # Print the distance
        print(f"Middle: {distance_m} cm")
        
        # Obstacle detection and avoidance logic
        if distance_m < 10:  # If an obstacle is detected
            print("Obstacle detected in the middle!")
            
            # Move backward for a short duration
            move_backward()
            time.sleep(1)
            
            # Randomly choose left or right to turn
            if distance_m < 5:  # If the obstacle is very close, turn right
                move_right()
            else:
                move_left()
            
            # Allow the robot to turn for a short duration
            time.sleep(0.5)
        else:  # If no obstacle, move forward
            move_forward()
        
        # Delay before the next reading
        time.sleep(0.1)
    
    except KeyboardInterrupt:
        # Stop the motors and exit the loop if a keyboard interrupt is detected
        stop_motors()
        break
    except Exception as e:
        # Print any exceptions for debugging
        print("Error:", e)
